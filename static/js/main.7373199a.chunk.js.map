{"version":3,"sources":["components/ListItem/ListItem.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","listItems","items","map","item","className","key","type","id","text","value","onChange","e","setUpdate","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","Main","useState","setItem","currentItem","setCurrentItem","onSubmit","preventDefault","newItems","placeholder","Date","now","filteredItems","filter","element","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yUAkCeA,EA7BE,SAACC,GACd,IAEMC,EAFQD,EAAME,MAEIC,KAAI,SAAAC,GACxB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACnC,2BACI,2BAAOC,KAAK,OACRC,GAAIJ,EAAKK,KACTC,MAAON,EAAKK,KACZE,SAAU,SAACC,GAAD,OAAOZ,EAAMa,UAAUD,EAAEE,OAAOJ,MAAON,EAAKE,QAE1D,8BACI,kBAAC,IAAD,CAAiBD,UAAU,UACvBU,KAAK,QACLC,QAAS,kBAAMhB,EAAMiB,WAAWb,EAAKE,cAMzD,OACI,6BACI,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC3BlB,K,eCtBjBmB,IAAQC,IAAIC,KAEZ,IAuDeC,EAvDF,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACRtB,EADQ,KACDuB,EADC,OAEuBD,mBAAS,CAACf,KAAK,GAAIH,IAAI,KAF9C,mBAERoB,EAFQ,KAEKC,EAFL,KAkCf,OACI,yBAAKnB,GAAG,WACJ,gCACI,0BAAMA,GAAG,aAAcoB,SA5BnB,SAAChB,GAEb,GADAA,EAAEiB,iBACuB,KAArBH,EAAYjB,KAAa,CACzB,IAAMqB,EAAQ,sBAAO5B,GAAP,CAAcwB,IAC5BD,EAAQK,GACRH,EAAe,CAAClB,KAAM,GAAIH,IAAK,QAwBvB,2BAAOC,KAAK,OACRwB,YAAY,aACZrB,MAAOgB,EAAYjB,KACnBE,SAtCA,SAACC,GACjBe,EAAe,CACXlB,KAAMG,EAAEE,OAAOJ,MACfJ,IAAK0B,KAAKC,WAqCF,4BAAQ1B,KAAK,UAAb,SAGR,kBAAC,EAAD,CACIL,MAAOA,EACPe,WA/BO,SAACX,GAChB,IAAM4B,EAAgBhC,EAAMiC,QAAO,SAAAC,GAAO,OAAIA,EAAQ9B,MAAMA,KAC5DmB,EAAQS,IA8BArB,UA5BM,SAACJ,EAAMH,GACrB+B,QAAQC,IAAI7B,GACZ,IAAMqB,EAAW5B,EACjB4B,EAAS3B,KAAI,SAAAiC,GACLA,EAAQ9B,MAAQA,IAChB+B,QAAQC,IAAIF,EAAQ9B,MAAMA,GAC1B8B,EAAQ3B,KAAOA,MAGvB4B,QAAQC,IAAIR,GACZL,EAAQK,QC5BDS,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.7373199a.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\r\nimport './ListItem.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport FlipMove from 'react-flip-move'\r\n\r\nconst ListItem = (props) => {\r\n    const items = props.items\r\n    \r\n    const listItems = items.map(item => {\r\n        return <div className=\"list\" key={item.key}>\r\n            <p>\r\n                <input type=\"text\" \r\n                    id={item.text} \r\n                    value={item.text}\r\n                    onChange={(e) => props.setUpdate(e.target.value, item.key)}\r\n                />\r\n                <span>\r\n                    <FontAwesomeIcon className=\"faicons\" \r\n                        icon='trash' \r\n                        onClick={() => props.deleteItem(item.key)}\r\n                    />\r\n                </span>\r\n            </p>\r\n        </div>\r\n    })\r\n    return (\r\n        <div>\r\n            <FlipMove duration={500} easing=\"ease-in-out\">\r\n                {listItems}\r\n            </FlipMove>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListItem","import React, { useState, useEffect } from 'react'\r\nimport './Main.css'\r\nimport ListItem from '../ListItem/ListItem'\r\nimport {library} from '@fortawesome/fontawesome-svg-core'\r\nimport {faTrash} from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(faTrash)\r\n\r\nconst Main = () => {\r\n    const [items, setItem] = useState([])\r\n    const [currentItem, setCurrentItem] = useState({text:'', key:''})\r\n    const handleInput = (e) => {\r\n        setCurrentItem({\r\n            text: e.target.value,\r\n            key: Date.now()\r\n        })\r\n    }\r\n    const addItem = (e) => {\r\n        e.preventDefault()\r\n        if (currentItem.text !== '') {\r\n            const newItems = [...items, currentItem]\r\n            setItem(newItems)\r\n            setCurrentItem({text: '', key: ''})\r\n        }\r\n    }\r\n    const deleteItem = (key) => {\r\n        const filteredItems = items.filter(element => element.key!==key)\r\n        setItem(filteredItems)\r\n    }\r\n    const setUpdate = (text, key) => {\r\n        console.log(text)\r\n        const newItems = items\r\n        newItems.map(element => {\r\n            if (element.key === key) {\r\n                console.log(element.key===key)\r\n                element.text = text\r\n            }\r\n        })\r\n        console.log(newItems)\r\n        setItem(newItems)\r\n    }\r\n    \r\n    return (\r\n        <div id=\"mainDiv\">\r\n            <header>\r\n                <form id=\"to-do-form\"  onSubmit={addItem}>\r\n                    <input type=\"text\" \r\n                        placeholder=\"Enter Text\" \r\n                        value={currentItem.text} \r\n                        onChange={handleInput} \r\n                    />\r\n                    <button type=\"submit\">Add</button>\r\n                </form>\r\n            </header>\r\n            <ListItem \r\n                items={items} \r\n                deleteItem={deleteItem}\r\n                setUpdate={setUpdate}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react';\nimport Main from './components/Main/Main';\n\nfunction App() {\n  return (\n    <div>\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}